#3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы
# методы перегрузки арифметических операторов: сложение (add()), вычитание (sub()), умножение (mul()), деление
# (truediv()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться округление
# значения до целого числа.
#Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
#Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше
# нуля, иначе выводить соответствующее сообщение.
#Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих
# двух клеток.
#Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек
# этих двух клеток.
#В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод
# позволяет организовать ячейки по рядам.
#Метод должен возвращать строку вида **\n\n***..., где количество ячеек между \n равно переданному аргументу. Если ячеек
# на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
#Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: **\n\n.
#Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: **\n\n***

class Cell():
    def __init__(self,countcell):
        self.countcell = int(countcell)
    def __add__(self, other):
        return Cell(self.countcell + other.countcell)
    def __sub__(self, other):
        return Cell(self.countcell - other.countcell) if self.countcell - other.countcell > 0 else "в первой клетке ячеек меньше"

    def __mul__(self, other):
        return Cell(self.countcell * other.countcell)
    def __truediv__(self, other):
        return Cell(self.countcell // other.countcell) if self.countcell // other.countcell != 0 else "в первой клетке ячеек меньше"
    def __str__(self):
        return str(self.countcell)
    def make_order(self,countinrow,classofcell):
        s2 = classofcell.countcell
        for i in range(0,classofcell.countcell // countinrow+1) :
            print (f"{'*'*countinrow}")
            s2 = s2 - countinrow
            countinrow = countinrow if s2 >= countinrow  else s2 % countinrow


a1 = Cell(12)
a2 = Cell (14)
a3 = a1+a2
print(a1-a2)
print(a1*a2)
print(a1/a2)
print(a1.make_order(6,a3))
